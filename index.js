(function memoji() {
    let data = ["üê∂","üê±","üê≠","üêπ","üê∞"," üêª","üêº","üê®","üêØ","ü¶Å","üêÆ","üê∑","üê∏","üêô","üêµ","ü¶Ñ","üêû","ü¶Ä","üêü","üêä","üêì","ü¶É","üêø"];
    let emoji = chooseSix(data); // –í—ã–±–∏—Ä–∞–µ–º 6 —Å–ª—É—á–∞–π–Ω—ã—Ö —ç–º–æ–¥–∂–∏
    let cards = addOrderNumberToCards(mixCards(makeCards(emoji))); // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
    let justSelectedCards = []; // –ó–¥–µ—Å—å —Ö—Ä–∞–Ω—è—Ç—Å—è 2 –∫–∞—Ä—Ç–æ—á–∫–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –∫–ª–∏–∫
    let justSelectedCardsOrders = []; // –ó–¥–µ—Å—å —Ö—Ä–∞–Ω–∏–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
    let cardsDOM = document.querySelectorAll(".card"); // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ DOM-–¥–µ—Ä–µ–≤–µ
    let justSelectedCardsDOM = []; // –ó–¥–µ—Å—å —Ö—Ä–∞–Ω—è—Ç—Å—è 2 –∫–∞—Ä—Ç–æ—á–∫–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –∫–ª–∏–∫
    let justSelectedCardsOrdersDOM = []; // –ó–¥–µ—Å—å —Ö—Ä–∞–Ω–∏–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
    let order = null; // –ó–¥–µ—Å—å —Ö—Ä–∞–Ω–∏—Ç—Å—è –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—ã–ª —Å–æ–≤–µ—Ä—à–µ–Ω –∫–ª–∏–∫ (—Å–º.—Ñ—É–Ω–∫—Ü–∏—é getOrderNumber)
    let closedCards = cards.length; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å
    let timer = new Timer(60); // –¢–∞–π–º–µ—Ä
    let showTimeId; // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤—Ä–º–µ–Ω–∏ (—Å–º.—Ñ—É–Ω–∫—Ü–∏—é timerStart)
    document.querySelector('.newGame').addEventListener('click', newGame); // –ö–Ω–æ–ø–∫–∞ "–ù–æ–≤–∞—è –∏–≥—Ä–∞"


    /**
     * –í—ã–±–∏—Ä–∞–µ—Ç 6 —Å–ª—É—á–∞–π–Ω—ã—Ö emoji –∏–∑ –Ω–∞–±–æ—Ä–∞
     * @param set
     * @returns {*}
     */
    function chooseSix(set) {
        let allEmojies = Array.prototype.slice.call(set); // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        let uniqe12 = []; // –ú–∞—Å—Å–∏–≤, –∫—É–¥–∞ –º—ã —Å–ª–æ–∂–∏–º 12 —Å–ª—É—á–∞–π–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞
        let count = allEmojies.length; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ —ç–º–æ–¥–∂–∏

        // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –º–µ–∂–¥—É min (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ) –∏ max (–Ω–µ –≤–∫–ª—é—á–∞—è max)
        function getRandomInt(min, max) {
            return Math.floor(Math.random() * (max - min)) + min;
        }
        // –û—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –º–∞—Å—Å–∏–≤–µ
        function unique(arr) {
            var obj = {};
            for (var i = 0; i < arr.length; i++) {
                var str = arr[i];
                obj[str] = true;
            }
            return Object.keys(obj);
        }
        // –í—ã–±–∏—Ä–∞–µ–º 12 —Å–ª—É—á–∞–π–Ω—ã—Ö —ç–º–æ–¥–∂–∏ (–º–æ–≥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è), –∑–∞—Ç–µ–º –ø—Ä–æ—Å–µ–∏–≤–∞–µ–º –∏—Ö —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö
        for (let i = 0; i < 12; i++) {
            uniqe12.push(allEmojies[getRandomInt(0,count)]);
        }
        // –í—ã–±–∏—Ä–∞–µ–º 6 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–º–æ–¥–∂–∏
        return unique(uniqe12).slice(0,6);
    }


    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —É –∫–∞—Ä—Ç–æ—á–∫–∏
     * value - –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
     * opened - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –æ—Ç–∫—Ä—ã—Ç–∞ —Å–µ–π—á–∞—Å –∫–∞—Ä—Ç–æ—á–∫–∞ –∏–ª–∏ –Ω–µ—Ç
     * finished - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω–∞–π–¥–µ–Ω–∞ –ª–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–∞—Ä–∞
     * @constructor
     */
    function Card() {
        this.order = null;
        this.value = null;
        this.opened = false;
        this.finished = false;
    }


    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–∞–±–æ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫, –∏—Å—Ö–æ–¥—è –∏–∑ –Ω–∞–±–æ—Ä–∞ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –±–∞–∑–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
     * @returns {[]} –ú–∞—Å—Å–∏–≤ —Å –∫–∞—Ä—Ç–∞–º–∏
     * @param values –ú–∞—Å—Å–∏–≤ —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
     * @param repeat –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ "–ø–æ–≤—Ç–æ—Ä–æ–∫", –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2
     */
    function makeCards(values, repeat) {
        let arrayOfValues = Array.prototype.slice.call(values);
        let set = [];
        if (repeat === undefined) {
            repeat = 2;
        }
        for (let i = 1; i <= repeat; i++) {
            arrayOfValues.forEach(function (cardValue) {
                let card = new Card();
                card.value = cardValue;
                set.push(card);
            });
        }
        return set;
    }


    /**
     * –¢–∞—Å—É–µ—Ç –∫–æ–ª–æ–¥—É –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
     * @param set - –ù–∞–±–æ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫
     * @returns {Array} - –ù–∞–±–æ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫
     */
    function mixCards(set) {
        let cards = Array.prototype.slice.call(set);
        function compareRandom(a, b) {
            return Math.random() - 0.5;
        }
        cards.sort(compareRandom);
        return cards;
    }


    /**
     * –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤—É –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä
     * @param set
     */
    function addOrderNumberToCards(set) {
        let cards = Array.prototype.slice.call(set);
        let order = 0;
        cards.forEach(function(card) {
            card.order = order;
            order++;
        });
        return cards;
    }


    /**
     * –ü–æ—Å–ª–µ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ –º–µ–Ω—è–µ–º –µ–π —Å—Ç–∞—Ç—É—Å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç—É—é
     */
    function changedOpenStatus() {
        cards[order].opened = true;
    }


    /**
     * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
     */
    function comparingOpenedCards() {
        // –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –º–µ–Ω—å—à–µ 2—Ö, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        if (justSelectedCards.length <= 1) {
            justSelectedCards.push(cards[Number(order)]);
            justSelectedCardsOrders.push(Number(order));
        }
        // –ö–æ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç–æ –¥–≤–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        if (justSelectedCards.length === 2) {

            // –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, —Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º —Å—Ç–∞—Ç—É—Å "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω–Ω—ã–µ"
            if (comparePair(justSelectedCards[0].value, justSelectedCards[1].value)) {
                cards[justSelectedCardsOrders[0]].finished = true;
                cards[justSelectedCardsOrders[1]].finished = true;
                closedCards = closedCards - 2;
                (closedCards === 0) ? checkCards() : {};
            }
            else {
            // –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–∞–∑–Ω—ã–µ, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º —Å—Ç–∞—Ç—É—Å "–ó–∞–∫—Ä—ã—Ç—ã–µ"
                cards[justSelectedCardsOrders[0]].opened = false;
                cards[justSelectedCardsOrders[1]].opened = false;
            }
            justSelectedCards = [];
            justSelectedCardsOrders = [];
        }
    }


    /**
     * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
     * @param a
     * @param b
     * @returns {boolean}
     */
    function comparePair(a, b) {
        return (a === b);
    }


    /**
     *
     * –ú–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ —Å DOM-–¥–µ—Ä–µ–≤–æ–º
     *
     */


    /**
     * –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∞–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä (DOM)
     */
    (function addOrderNumberToCardsDom() {
        let order = 0;
        cardsDOM.forEach(function(card){
            card.dataset.order = order;
            order++;
        });
    })();


    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—ã–ª —Å–æ–≤–µ—Ä—à–µ–Ω –∫–ª–∏–∫
     */
    function getOrderNumber() {
        order = this.dataset.order;
    }


    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ data-value
     */
    function setDataValue() {
        this.dataset.value = cards[order].value;
    }


    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç/–∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—É
     */
    function openCloseCard(obj) {
        // –î–æ–±–∞–≤–∏–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        if (obj.constructor === HTMLDivElement) {
            if (!obj.classList.contains('opened')) {
                obj.classList.add('opened');
            } else  {
                obj.classList.remove('opened');
            }
        } else {
            if (!this.classList.contains('opened')) {
                this.classList.add('opened');
            } else  {
                this.classList.remove('opened');
            }
        }
    }


    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
     */
    function closeAllCards() {
        cardsDOM.forEach(function(card){
            if(card.classList.contains('opened')) {
                card.classList.remove('opened');
            }
        });
    }


    /**
     * –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–∞—Ä—Ç—ã
     * @param obj
     */
    function cardBlocked(obj) {
        obj.removeEventListener('click', getOrderNumber);
        obj.removeEventListener('click', changedOpenStatus);
        obj.removeEventListener('click', comparingOpenedCards); // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        obj.removeEventListener('click', setDataValue);
        obj.removeEventListener('click', openCloseCard);
        obj.removeEventListener('click', compareCards); // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
    }


    /**
     * –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ (–ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã)
     */
    function cardBlockedAll(){
        cardsDOM.forEach(function(card){
           cardBlocked(card);
        });
    }


    /**
     * –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–∞—Ä—Ç—ã
     * @param obj
     */
    function cardUnblocked(obj) {
        obj.addEventListener('click', getOrderNumber);
        obj.addEventListener('click', changedOpenStatus);
        obj.addEventListener('click', comparingOpenedCards); // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        obj.addEventListener('click', setDataValue);
        obj.addEventListener('click', openCloseCard);
        obj.addEventListener('click', compareCards); // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
    }


    /**
     * –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ (–¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã)
     */
    function cardUnblockedAll(){
        cardsDOM.forEach(function(card){
            cardUnblocked(card);
        });
    }


    /**
     * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫
     */
    function compareCards() {
        // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—å—à–µ —Ç—Ä–µ—Ö –∫–∞—Ä—Ç
        if (justSelectedCardsDOM.length <= 2) {
            justSelectedCardsDOM.push(this);
            justSelectedCardsOrdersDOM.push(order);
            cardBlocked(this);
        }
        // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ 2 –∫–∞—Ä—Ç—ã
        if (justSelectedCardsDOM.length === 2) {
            // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —É –∏—Å—Ö–æ–¥–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            if (comparePair(cards[justSelectedCardsOrdersDOM[0]].value, cards[justSelectedCardsOrdersDOM[1]].value)) {
                cardBlocked(justSelectedCardsDOM[0]);
                cardBlocked(justSelectedCardsDOM[1]);
                justSelectedCardsDOM = [];
                justSelectedCardsOrdersDOM = [];
            }
        }
        // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ 3 –∫–∞—Ä—Ç—ã
        if (justSelectedCardsDOM.length === 3) {
            cardUnblocked(justSelectedCardsDOM[0]);
            cardUnblocked(justSelectedCardsDOM[1]);
            openCloseCard(justSelectedCardsDOM[0]);
            openCloseCard(justSelectedCardsDOM[1]);
            justSelectedCardsDOM.splice(0,2);
            justSelectedCardsOrdersDOM.splice(0,2);
        }
    }


    /**
     * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–∞—Ä—Ç—É
     */
    cardsDOM.forEach(function(card) {
        card.addEventListener('click', getOrderNumber); // –í–æ–∑–≤—Ä–∞—Ç –ø–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—ã–ª –∫–ª–∏–∫
        card.addEventListener('click', changedOpenStatus); // –°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ "–û—Ç–∫—Ä—ã—Ç"
        card.addEventListener('click', comparingOpenedCards); // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        card.addEventListener('click', setDataValue); // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
        card.addEventListener('click', openCloseCard); // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
        card.addEventListener('click', compareCards); // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
    });


    /**
     *
     * –†–µ–∑—É–ª—å—Ç–∞—Ç–Ω–∞—è —á–∞—Å—Ç—å (–≤—Ä–µ–º—è –∏ —Å–æ–æ–±—â–µ–Ω–∏—è)
     *
     */


    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ç–∞–π–º–µ—Ä–∞
     * @constructor
     */
    function Timer(sec) {
        let self = this;
        this.seconds = sec;
        let timerId = null;
        let afterTimer = null;

        // –ú–µ—Ç–æ–¥ –≤—ã—á–∏—Ç–∞–Ω–∏—è
        this.subtract = function() {
            self.seconds--;
            // console.log(self.seconds);
            if (self.seconds === 0) {
                clearInterval(timerId);
            }
            return self;
        };

        // –ú–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞
        this.start = function() {
            // console.log(self.seconds);
            timerId = setInterval(this.subtract, 1000);
            return self;
        };

        // –ú–µ—Ç–æ–¥ –ø–∞—É–∑—ã
        this.stop = function() {
            clearInterval(timerId);
            clearTimeout(afterTimer);
            return self
        };

        // –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã —Å—á–µ—Ç—á–∏–∫–∞
        this.after = function(func) {
            afterTimer = setTimeout(func, this.seconds * 1000);
            return self;
        };

        // –ú–µ—Ç–æ–¥ —Å–±—Ä–æ—Å–∞ —Ç–∞–π–º–µ—Ä–∞
        this.reset = function() {
            this.seconds = sec;
            return self;
        }
    }


    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–∏ –ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
     */
    function checkCards() {
        if (closedCards === 0) {
            timer.stop();
            gameOver(1);
        } else {
            gameOver();
        }
    }


    /**
     * –§—É–Ω–∫—Ü–∏—è, —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã
     */
    function gameOver(result) {
        setTimeout(cardBlockedAll, 1000);
        let message = null;
        switch (result) {
            case 1:
               message = "Win";
               break;
            default:
                message = "Lose";
        }

        function decorateFinalCaption() {
            let letters = message.split('');
            let i = 0;
            document.querySelector('.message').innerHTML = "";
            letters.forEach(function (letter) {
                document.querySelector('.message').innerHTML += `<div class="letter">${letter}</div>`;
                document.querySelectorAll('.letter')[i].style.animation = "dancingCaption";
                document.querySelectorAll('.letter')[i].style.animationDuration = "0.5s";
                document.querySelectorAll('.letter')[i].style.animationDirection = "alternate";
                document.querySelectorAll('.letter')[i].style.animationIterationCount = "infinite";
                document.querySelectorAll('.letter')[i].style.animationDelay = `${i/10}s`;
                i++;
            });
        }

        function endScreen() {
            document.querySelector('.gameOver').classList.add('show');

        }
        hideTime();
        setTimeout(endScreen, 1000);
        decorateFinalCaption();
    }


    /**
     * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ —Å–µ–±—è —ç–∫–∑–µ–º–ª–ø—è—Ä —Ç–∞–π–º–µ—Ä–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—É—é –≤ —Ü–∏—Ñ—Ä–æ–≤–æ–π –≤–∏–¥ —Å—Ç—Ä–æ–∫—É
     * @param timer
     * @returns {string}
     */
    function digitalTimeFormat(timer) {
        let minutes = Math.floor(timer.seconds / 60);
        let seconds = timer.seconds % 60;
        if (minutes <= 9) {
            minutes = "0" + minutes;
        }
        if (seconds <= 9) {
            seconds = "0" + seconds;
        }
        return `${minutes}:${seconds}`;
    }


    /**
     * –í—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
     */
    function showTime() {
        document.querySelector('.time').classList.add('show');
        document.querySelector('.time').innerHTML = digitalTimeFormat(timer);
    }


    /**
     * –£–±–∏—Ä–∞–µ—Ç –≤—Ä–µ–º—è —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    function hideTime() {
        clearInterval(showTimeId);
        document.querySelector('.time').classList.remove('show');
    }


    /**
     * –ó–∞–ø—É—Å–∫–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞
     */
    function timerStart() {
        // –£–±–∏—Ä–∞–µ–º —Å –∫–Ω–æ–ø–∫–∏ —Å–æ–±—ã—Ç–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–π–º–µ—Ä–∞
        removeTimerListenerFromTheFirstClick();
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        timer.reset().start().after(checkCards);
        // –í—ã–≤–æ–¥–∏–º –∏—Å—Ö–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –≤ DOM-–¥–µ—Ä–µ–≤–æ
        showTime();
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏–µ –≤ DOM-–¥–µ—Ä–µ–≤–æ
        showTimeId = setInterval(showTime, 1000);
    }


    /**
     * –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –∑–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –ø–æ –ø–µ—Ä–≤–æ–º—É –∫–ª–∏–∫—É –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ
     */
    function startTimerOnFirstClick() {
        cardsDOM.forEach(function(card) {
            card.addEventListener('click', timerStart);
        });
    }


    /**
     * –û—Ç–∫–ª—é—á–∞–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ç–∞–π–º–µ—Ä–∞ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É
     */
    function removeTimerListenerFromTheFirstClick() {
        cardsDOM.forEach(function(card) {
            card.removeEventListener('click', timerStart);
        });
    }


    /**
     * –ù–æ–≤–∞—è –∏–≥—Ä–∞
     */
    function newGame() {
        // –£–±–∏—Ä–∞–µ–º –æ–∫–Ω–æ "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞"
        document.querySelector('.gameOver').classList.remove('show');
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        closeAllCards();
        // –ó–∞–Ω–æ–≤–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        emoji = chooseSix(data);
        cards = addOrderNumberToCards(mixCards(makeCards(emoji)));
        justSelectedCards = []; // –ó–¥–µ—Å—å —Ö—Ä–∞–Ω—è—Ç—Å—è 2 –∫–∞—Ä—Ç–æ—á–∫–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –∫–ª–∏–∫
        justSelectedCardsOrders = []; // –ó–¥–µ—Å—å —Ö—Ä–∞–Ω–∏–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
        cardsDOM = document.querySelectorAll(".card"); // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ DOM-–¥–µ—Ä–µ–≤–µ
        justSelectedCardsDOM = []; // –ó–¥–µ—Å—å —Ö—Ä–∞–Ω—è—Ç—Å—è 2 –∫–∞—Ä—Ç–æ—á–∫–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –∫–ª–∏–∫
        justSelectedCardsOrdersDOM = []; // –ó–¥–µ—Å—å —Ö—Ä–∞–Ω–∏–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
        order = null;
        closedCards = cards.length;
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—Ä–µ–º–µ–Ω–∏
        timer.reset();
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è
        showTime();
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
        cardUnblockedAll();
        // –û–∂–∏–¥–∞–µ–º –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞
        startTimerOnFirstClick();
    }


    newGame(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã


})();